#!/usr/bin/env python
"""
 runRSDFitter
 pyRSD: run the RSD MCMC fitter
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 12/22/2014
"""
from emcee.utils import MPIPool
from pyRSD.analysis import DataAnalysisDriver
from pyRSD.analysis.parameters import ParameterSet

import logging
import argparse
import sys
import os

#-------------------------------------------------------------------------------
def setup_logger(filename):

    # set up logging to file
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                        datefmt='%m-%d %H:%M',
                        filename=filename,
                        filemode='w')
                        
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)

#-------------------------------------------------------------------------------
def main(args):
    """
    The main function
    """
    try:        
        pool = MPIPool()
    except:
        pool = None
    
    if pool is not None and not pool.is_master():
        pool.wait()
        sys.exit(0)
        
    # setup the logger
    p = ParameterSet(args.params)
    odir = p['output_dir'].value
    if not os.path.exists(odir):
        os.makedirs(odir)
    filename = "{}/{}.log".format(odir, p['label'].value)
    print filename
    setup_logger(filename)
        
    # initialize the fitter
    driver = DataAnalysisDriver(args.params, args.theory_params, args.data_params, pool=pool)

    # run
    driver.run()
#end main

#-------------------------------------------------------------------------------
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "run the RSD model fitter"
    parser = argparse.ArgumentParser(description=desc)
    
    h = 'The file name holding the general parameters'
    parser.add_argument('params', type=str, help=h) 
    
    h = 'The file name holding the theory parameters'
    parser.add_argument('theory_params', type=str, help=h)
    
    h = 'The file name holding the data params'
    parser.add_argument('data_params', type=str, help=h)

    args = parser.parse_args()
    main(args)
    
#-------------------------------------------------------------------------------
#!/usr/bin/env python
"""
 runRSDFitter
 pyRSD: run the RSD MCMC fitter
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 12/22/2014
"""
try:
    from emcee.utils import MPIPool
except ImportError:
    pass
from pyRSD import fit 
import argparse
import sys

#-------------------------------------------------------------------------------
def boolean(string):
    string = string.lower()
    if string in ['0', 'f', 'false', 'no', 'off']:
        return False
    elif string in ['1', 't', 'true', 'yes', 'on']:
        return True
    else:
        raise ValueError()

#-------------------------------------------------------------------------------
def main(args):
    """
    The main function
    """
    try:        
        pool = MPIPool()
    except:
        pool = None
    
    if pool is not None and not pool.is_master():
        pool.wait()
        sys.exit(0)

    # initialize the fitter
    fitter = fit.GalaxyRSDFitter(args.param_file, 
                                pool=pool,
                                burnin=args.burnin,
                                iterations=args.iterations,
                                walkers=args.walkers,
                                verbose=args.verbose, 
                                fig_verbose=args.fig_verbose)

    # run
    fitter.run()
    
    # save
    fitter.save_results()
#end main

#-------------------------------------------------------------------------------
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "Run the RSD MCMC fitter"
    parser = argparse.ArgumentParser(description=desc)
    
    h = 'The name of the parameter file'
    parser.add_argument('param_file', type=str, help=h) 

    h = 'Verbosity level'
    parser.add_argument('-v', '--verbose', type=boolean, default=True, help=h)
    
    h = 'Figure verbosity level'
    parser.add_argument('-fv', '--fig-verbose', type=boolean, default=True, help=h)
    
    h = 'The number of steps to use as the burn-in period.'
    parser.add_argument('--burnin', type=int, default=50, help=h)
    
    h = 'The number of iterations to run as part of the chain.'
    parser.add_argument('--iterations', type=int, default=500, help=h)
    
    h = 'The number of walkers to use'
    parser.add_argument('--walkers', type=int, default=20, help=h)
    
    args = parser.parse_args()
    main(args)
    
#-------------------------------------------------------------------------------